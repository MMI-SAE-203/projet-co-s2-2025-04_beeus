---
import Layout from "../../layouts/Layout.astro";
import StarRating from "../../components/GetStarRating.jsx";
import FavoritePlaceButton from "../../components/FavoritePlaceButton.jsx";
import PlaceCategories from "../../components/PlaceCategories.astro";
import CreatePlaceComment from "../../components/CreatePlaceComment.jsx";
import anonyme from "../../icons/user_2.svg";

import {
  pb,
  getPlaceIdBySlug,
  isUserFavoritePlace,
  getPlaceNotation,
} from "../../lib/pocketbase.mjs";

const { slug } = Astro.params;
if (!slug) return Astro.redirect("/404");

const lieu = await getPlaceIdBySlug(slug);
if (!lieu?.id) return Astro.redirect("/404");

const creator = lieu.expand?.createur;
const creatorHasAvatar = creator?.avatar;
const creatorAvatarUrl = creatorHasAvatar
  ? pb.files.getURL(creator, creator.avatar)
  : anonyme.src;

const creatorId = creator?.id;
const userFavorite = await isUserFavoritePlace(creatorId, lieu.id);
const categories = lieu.expand?.categories || [];
const adresse = lieu.adresse;
let notations = await getPlaceNotation(lieu.id);
let nbNotes = notations.length;

const currentUser = pb.authStore.model;
const currentUserId = currentUser?.id;

const comments = Array.isArray(notations)
  ? notations
      .filter(
        (comment) =>
          typeof comment.commentaire === "string" &&
          comment.commentaire.trim() !== ""
      )
      .map((comment) => ({
        ...comment,
        isOwner: comment.expand?.user?.id === currentUserId,
      }))
  : [];
---

<Layout
  title={`${lieu.nom} | Sortie étudiante à ${adresse} – Avis, photos et infos | BeeUs`}
  description={`Découvre ${lieu.nom}, un lieu incontournable pour les étudiants à ${adresse}. Consulte les avis, notes, photos et catégories. Partage ton expérience ou trouve de nouvelles adresses où sortir et rencontrer d'autres étudiants sur BeeUs.`}
>
  <section
    class="flex flex-col w-full h-full px-4 md:px-6 lg:px-10 max-w-3xl mx-auto mt-6 pt-24"
  >
    <div class="flex flex-wrap gap-2 items-center justify-between w-full">
      <h1 class="text-2xl font-bold">{lieu.nom}</h1>

      <FavoritePlaceButton
        initialFavorite={userFavorite.length > 0}
        userId={currentUserId}
        placeId={lieu.id}
        client:load
      />
    </div>

    <div class="flex items-center gap-2 *:font-extralight *:text-xs mt-3">
      <img
        class="w-[25px] h-[25px] rounded-full"
        src={creator?.prive || !creator?.avatar
          ? anonyme.src
          : pb.files.getURL(creator, creator.avatar)}
        alt="icône de profil"
      />

      <p>
        Posté par&nbsp;
        {
          creator?.prive
            ? "un utilisateur anonyme"
            : `${creator?.prenom} ${creator?.nom}`
        }
      </p>
    </div>
    <p class="font-extralight text-xs mt-3">{adresse}</p>
  </section>

  <section class="overflow-hidden px-4 md:px-6 lg:px-10 max-w-3xl mx-auto mt-6">
    {
      lieu.images && lieu.images.length > 0 ? (
        <div class="grid gap-2 mt-4 h-[60dvh]">
          {lieu.images.length >= 4 ? (
            <div class="grid grid-cols-10 gap-2 h-full">
              <div class="col-span-5 grid grid-rows-2 gap-2">
                <div class="row-span-1 overflow-hidden relative h-full">
                  <img
                    src={pb.files.getURL(lieu, lieu.images[0])}
                    alt={`${lieu.nom} - image 1`}
                    class="absolute inset-0 w-full h-full object-cover object-center rounded-lg"
                  />
                </div>
                <div class="row-span-1 overflow-hidden relative h-full">
                  <img
                    src={pb.files.getURL(lieu, lieu.images[2])}
                    alt={`${lieu.nom} - image 3`}
                    class="absolute inset-0 w-full h-full object-cover object-center rounded-lg"
                  />
                </div>
              </div>
              <div class="col-span-5 grid grid-rows-5 gap-2">
                <div class="row-span-3 overflow-hidden relative h-full">
                  <img
                    src={pb.files.getURL(lieu, lieu.images[1])}
                    alt={`${lieu.nom} - image 2`}
                    class="absolute inset-0 w-full h-full object-cover object-center rounded-lg"
                  />
                </div>
                <div class="row-span-2 overflow-hidden relative h-full">
                  <img
                    src={pb.files.getURL(lieu, lieu.images[3])}
                    alt={`${lieu.nom} - image 4`}
                    class="absolute inset-0 w-full h-full object-cover object-center rounded-lg"
                  />
                </div>
              </div>
            </div>
          ) : lieu.images.length === 3 ? (
            <div class="grid grid-rows-2 lg:grid-rows-1 lg:grid-cols-3 gap-2 h-full lg:max-h-[45dvh]">
              <div class="row-span-1 overflow-hidden relative h-full lg:col-span-2">
                <img
                  src={pb.files.getURL(lieu, lieu.images[0])}
                  alt={`${lieu.nom} - image 1`}
                  class="absolute inset-0 w-full h-full object-cover object-center rounded-lg"
                />
              </div>
              <div class="grid grid-cols-2 lg:grid-cols-1 gap-2">
                <div class="overflow-hidden relative h-[60%] md:h-[80%] lg:h-full">
                  <img
                    src={pb.files.getURL(lieu, lieu.images[1])}
                    alt={`${lieu.nom} - image 2`}
                    class="absolute inset-0 w-full h-full object-cover object-center rounded-lg"
                  />
                </div>
                <div class="overflow-hidden relative h-[60%] md:h-[80%] lg:h-full">
                  <img
                    src={pb.files.getURL(lieu, lieu.images[2])}
                    alt={`${lieu.nom} - image 3`}
                    class="absolute inset-0 w-full h-full object-cover object-center rounded-lg"
                  />
                </div>
              </div>
            </div>
          ) : lieu.images.length === 2 ? (
            <div class="grid grid-rows-2 md:grid-cols-2 md:grid-rows-1 gap-2 h-full lg:max-h-[45dvh]">
              <div class="row-span-1 overflow-hidden relative h-full">
                <img
                  src={pb.files.getURL(lieu, lieu.images[0])}
                  alt={`${lieu.nom} - image 1`}
                  class="absolute inset-0 w-full h-full object-cover object-center rounded-lg"
                />
              </div>
              <div class="row-span-1 overflow-hidden relative h-full">
                <img
                  src={pb.files.getURL(lieu, lieu.images[1])}
                  alt={`${lieu.nom} - image 2`}
                  class="absolute inset-0 w-full h-full object-cover object-center rounded-lg"
                />
              </div>
            </div>
          ) : (
            <div class="overflow-hidden relative h-full lg:max-h-[50dvh]">
              <img
                src={pb.files.getURL(lieu, lieu.images[0])}
                alt={`${lieu.nom} - image 1`}
                class="absolute inset-0 w-full h-full object-cover object-center rounded-lg"
              />
            </div>
          )}
        </div>
      ) : (
        <p class="text-center text-gray-500 mt-4">Aucune image disponible</p>
      )
    }
  </section>

  <section
    class="flex flex-col gap-4 px-4 md:px-6 lg:px-10 max-w-3xl mx-auto mt-6"
  >
    <PlaceCategories categories={categories} />
  </section>

  <section
    class="flex flex-col gap-4 px-4 md:px-6 lg:px-10 max-w-3xl mx-auto mt-6"
  >
    <h2 class="text-xl font-bold">Notation</h2>
    <p>Avis ({nbNotes})</p>
    <StarRating lieuId={lieu.id} client:load />

    {
      comments.length > 0 ? (
        <div class="flex flex-col gap-2 mt-4 *:text-white">
          {comments.map((comment) => (
            <div class="relative flex flex-col gap-2 p-4 border border-gray-100 bg-zinc-800 rounded-lg shadow-md">
              {comment.isOwner && (
                <div class="absolute top-2 right-2 flex gap-1">
                  <button
                    class="text-xs text-yellow-400 underline"
                    onclick={`window.dispatchEvent(new CustomEvent('edit-comment', { detail: ${JSON.stringify(
                      {
                        id: comment.id,
                        note: comment.note,
                        commentaire: comment.commentaire,
                      }
                    )} }))`}
                  >
                    Modifier
                  </button>
                  <button
                    class="text-xs text-red-400 underline"
                    onclick={`window.dispatchEvent(new CustomEvent('delete-comment', { detail: { id: '${comment.id}' } }))`}
                  >
                    Supprimer
                  </button>
                </div>
              )}

              <div class="flex gap-2 items-center">
                <img
                  src={comment.expand?.user?.avatar || anonyme.src}
                  alt="avatar de l'utilisateur"
                  class="w-[25px] h-[25px] rounded-full"
                />

                <p class="text-sm">
                  {comment.expand?.user?.prenom || "Utilisateur inconnu"}
                </p>
              </div>
              <p>{comment.commentaire}</p>
            </div>
          ))}
        </div>
      ) : (
        <p class="text-center text-gray-500 mt-4">
          Aucun commentaire disponible
        </p>
      )
    }

    <CreatePlaceComment client:only lieuId={lieu.id} userId={currentUserId} />
  </section>
</Layout>

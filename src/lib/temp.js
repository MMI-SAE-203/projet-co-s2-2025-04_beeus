import PocketBase from "pocketbase";

const pb = new PocketBase("https://pb-beeus.bryan-menoux.fr:443");

async function run() {
  await pb.admins.authWithPassword("admin@admin.com", "s1V0i5P0sp0HZkv");

  const escape = (str) => str.replace(/"/g, '\\"').trim();

  const data = {
    "Soir√©e & F√™te": [
      "Soir√©e √©tudiante",
      "Soir√©e √† th√®me",
      "Ap√©ro / D√©gustation",
      "Soir√©e priv√©e",
      "Soir√©e int√©gration",
    ],
    "Bar & Chill": [
      "Bar √† jeux",
      "Bar √† cocktails",
      "Pub / Brasserie",
      "Rooftop / Terrasse",
      "Happy Hour entre potes",
    ],
    "Culture & Spectacle": [
      "Concert live",
      "Th√©√¢tre ou spectacle vivant",
      "Projection √©tudiante",
      "Exposition ou vernissage",
      "Sc√®ne libre / Micro ouvert",
    ],
    "Gaming & E-sport": [
      "Tournoi jeux vid√©o",
      "Soir√©e Mario Kart / FIFA",
      "LAN party",
      "Escape Game",
      "Blind test / Quiz",
    ],
    "Sport & Activit√© physique": [
      "Tournoi sportif",
      "Yoga / stretching",
      "Patinoire / Piscine / Bowling",
      "Course chill ou rando",
      "D√©couverte sport insolite",
    ],
    "√âtudes & R√©visions": [
      "R√©visions collectives",
      "Groupes de TD",
      "Semaine d‚Äôexam",
      "Atelier m√©thodo",
      "Talk √©tudiant / invit√©¬∑e",
    ],
    Outdoor: [
      "Pique-nique collectif",
      "Sortie parc ou jardin",
      "Chill au bord du lac",
      "Guitare / musique dehors",
      "Chasse au tr√©sor urbaine",
    ],
    Shopping: [
      "Vide-dressing √©tudiant",
      "March√© solidaire",
      "Friperie √©ph√©m√®re",
      "Troc √©tudiant",
      "DIY mode",
    ],
    Cr√©atif: [
      "Atelier cr√©atif",
      "Atelier cuisine",
      "Upcycling / d√©co",
      "Tatouage / nail art",
      "Podcast / fanzine / journal",
    ],
    Autre: [
      "Rencontre inter-campus",
      "D√©couverte de lieu",
      "√âv√©nement associatif",
      "Soir√©e surprise",
      "√Ä d√©finir ensemble",
    ],
  };

  for (const [categorie, sousCats] of Object.entries(data)) {
    try {
      const sousCategorieIds = [];

      for (const label of sousCats) {
        // üîç V√©rifie si la sous-cat√©gorie existe, sinon la cr√©e
        let sous = await pb
          .collection("sous_categories_evenement")
          .getFirstListItem(`sous_categorie = "${escape(label)}"`)
          .catch(() => null);

        if (!sous) {
          sous = await pb.collection("sous_categories_evenement").create({
            sous_categorie: label,
          });
          console.log(`‚úÖ Sous-cat√©gorie cr√©√©e : ${label}`);
        } else {
          console.log(`‚ö†Ô∏è Sous-cat√©gorie existante : ${label}`);
        }

        sousCategorieIds.push(sous.id);
      }

      if (sousCategorieIds.length === 0) {
        console.warn(
          `‚ùå Aucune sous-cat√©gorie pour : ${categorie} ‚Äî cat√©gorie ignor√©e`
        );
        continue;
      }

      const existingCat = await pb
        .collection("categories_evenement")
        .getFirstListItem(`categorie = "${escape(categorie)}"`)
        .catch(() => null);

      if (existingCat) {
        console.log(`‚ö†Ô∏è Cat√©gorie d√©j√† existante : ${categorie}`);
        continue;
      }

      const created = await pb.collection("categories_evenement").create({
        categorie,
        sous_categorie: sousCategorieIds,
      });

      console.log(
        `‚úÖ Cat√©gorie cr√©√©e : ${categorie} ‚Üí ${sousCategorieIds.length} sous-cat√©gories li√©es`
      );
    } catch (err) {
      console.error(`‚ùå Erreur pour "${categorie}" :`, err.message);
    }
  }

  console.log("üéâ Cat√©gories et sous-cat√©gories √©v√©nement : termin√© !");
}

run();

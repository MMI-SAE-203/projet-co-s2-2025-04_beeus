---
import { pb, getAllPlaces, getAllPlacesForUser } from "../lib/pocketbase.mjs";
import PlacesInteraction from "./SetPlacesInteraction.jsx";
import PlaceCarousel from "../components/PlaceCarousel.astro";

const places = await getAllPlaces();
const userId = pb.authStore?.record?.id;
const userInteractions = userId ? await getAllPlacesForUser(userId) : [];
const interactionsMap = new Map();

userInteractions.forEach(
  ({
    lieu,
    like,
    save,
    share,
  }: {
    lieu: string;
    like: boolean;
    save: boolean;
    share: boolean;
  }) => {
    if (lieu)
      interactionsMap.set(lieu, { like: !!like, save: !!save, share: !!share });
  }
);
---

<div id="app-header" class="bg-black px-4 sm:px-6 py-3">
  <div class="flex items-center justify-between max-w-screen-lg mx-auto">
    <a
      href="/places-filter"
      class="px-3 py-1.5 rounded-full bg-fuchsia-700 text-white text-xs sm:text-sm font-medium transition-colors duration-150 ease-in-out hover:bg-fuchsia-600 focus:outline-none focus-visible:ring-2 focus-visible:ring-fuchsia-500 focus-visible:ring-offset-2 focus-visible:ring-offset-black"
    >
      Filtrer
    </a>
    <a
      href="/create-place"
      class="p-2 rounded-full bg-fuchsia-700 text-white transition-colors duration-150 ease-in-out hover:bg-fuchsia-600 focus:outline-none focus-visible:ring-2 focus-visible:ring-fuchsia-500 focus-visible:ring-offset-2 focus-visible:ring-offset-black"
      aria-label="Créer un nouveau lieu"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="w-4 h-4 sm:w-5 sm:h-5"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
        stroke-width="2"
      >
        <path stroke-linecap="round" stroke-linejoin="round" d="M12 4v16m8-8H4"
        ></path>
      </svg>
    </a>
  </div>
</div>

<div
  id="places-container"
  class="h-[calc(92dvh-var(--header-height))] overflow-y-auto overscroll-contain snap-y snap-mandatory bg-gray-950"
  data-vertical-scroll="true"
>
  {
    places.map((place: any, index: any) => {
      const ui = interactionsMap.get(place.id) || {
        like: false,
        save: false,
        share: false,
      };
      return (
        <div
          id={`place-${index}`}
          class="relative flex flex-col snap-start snap-always h-full bg-gray-900 border-b border-gray-800"
        >
          <div class="flex items-center gap-3 sm:gap-4 px-4 sm:px-6 py-3">
            <img
              src={
                !place.expand.createur?.prive && place.creatorAvatar
                  ? place.creatorAvatar
                  : "/src/icons/user_2.svg"
              }
              alt="Avatar de l'utilisateur"
              class="w-10 h-10 sm:w-11 sm:h-11 rounded-full flex-shrink-0"
              loading="lazy"
            />

            <div class="text-white text-left text-xs sm:text-sm min-w-0">
              <p class="font-semibold leading-tight truncate">
                {!place.expand.createur?.prive
                  ? place.expand.createur.prenom +
                    " " +
                    place.expand.createur.nom
                  : "Utilisateur anonyme"}
              </p>
              <p class="text-gray-400 text-xs leading-tight">Il y a 12h</p>
              <p class="text-gray-400 text-xs leading-tight truncate">
                {place.adresse}
              </p>
            </div>
            <button class="ml-auto px-3 py-1 rounded-full border border-fuchsia-600 text-fuchsia-400 text-xs sm:text-sm font-medium flex items-center gap-1.5 flex-shrink-0 transition-colors duration-150 ease-in-out hover:bg-fuchsia-900/50 focus:outline-none focus-visible:ring-2 focus-visible:ring-fuchsia-500 focus-visible:ring-offset-2 focus-visible:ring-offset-gray-900">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="w-3.5 h-3.5"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
                stroke-width="2"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  d="M4.318 6.318a4.5 4.5 0 0 1 6.364 0L12 7.636l1.318-1.318a4.5 4.5 0 1 1 6.364 6.364L12 21.682l-7.682-7.682a4.5 4.5 0 0 1 0-6.364z"
                />
              </svg>
              Suivre
            </button>
          </div>

          <div class="flex-grow w-full max-w-lg mx-auto overflow-hidden relative">
            <PlaceCarousel images={place.imagesUrls} />
          </div>

          <div class="absolute right-2 md:right-4 top-1/2 -translate-y-1/2 flex flex-col gap-3 sm:gap-4 z-10 m-0 items-end overflow-visible">
            <PlacesInteraction
              placeId={place.id}
              like={ui.like}
              save={ui.save}
              slug={place.slug}
              client:load
            />
          </div>

          <div class="absolute bottom-20 left-20 -translate-x-1/2 z-10">
            <a
              href={`/places/${place.slug}`}
              class="w-fit px-4 py-2 rounded-full bg-black/70 text-white text-xs sm:text-sm font-medium shadow-lg backdrop-blur-sm whitespace-nowrap transition duration-150 ease-in-out hover:bg-black/90 focus:outline-none focus-visible:ring-2 focus-visible:ring-white/70 focus-visible:ring-offset-2 focus-visible:ring-offset-gray-900"
            >
              DÉCOUVRIR CE LIEU
            </a>
          </div>
        </div>
      );
    })
  }
</div>

<script type="module" is:inline>
  const container = document.getElementById("places-container");

  function setHeaderHeight() {
    const header = document.querySelector("#app-header");
    if (header) {
      const headerHeight = header.offsetHeight;
      document.documentElement.style.setProperty(
        "--header-height",
        `${headerHeight}px`
      );
    } else {
      console.error(
        "Error: Header #app-header not found for height calculation."
      );
    }
  }

  function setupVerticalScroll() {
    const placesContainer = document.getElementById("places-container");
    if (!placesContainer) return;

    let isCarouselActive = false;

    document.addEventListener("carousel:dragstart", () => {
      isCarouselActive = true;
    });

    document.addEventListener("carousel:dragend", () => {
      isCarouselActive = false;
    });

    let lastScrollTime = 0;
    let scrollTimeout = null;
    const scrollThreshold = 300;

    placesContainer.addEventListener(
      "scroll",
      () => {
        const now = Date.now();
        if (now - lastScrollTime > scrollThreshold) {
          lastScrollTime = now;
        }

        clearTimeout(scrollTimeout);
        scrollTimeout = setTimeout(() => {
          if (!isCarouselActive) {
            const scrollPos = placesContainer.scrollTop;
            const containerHeight = placesContainer.offsetHeight;
            const snapPoint =
              Math.round(scrollPos / containerHeight) * containerHeight;

            placesContainer.scrollTo({
              top: snapPoint,
              behavior: "smooth",
            });
          }
        }, 150);
      },
      { passive: true }
    );

    let touchStartY = 0;
    let touchDirection = null;

    placesContainer.addEventListener(
      "touchstart",
      (e) => {
        if (isCarouselActive) return;
        touchStartY = e.touches[0].clientY;
        touchDirection = null;
      },
      { passive: true }
    );

    placesContainer.addEventListener(
      "touchmove",
      (e) => {
        if (isCarouselActive) return;
        const currentY = e.touches[0].clientY;
        const diff = currentY - touchStartY;

        if (!touchDirection && Math.abs(diff) > 10) {
          touchDirection = diff > 0 ? "down" : "up";
        }
      },
      { passive: true }
    );
  }

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", () => {
      setHeaderHeight();
      setupVerticalScroll();
    });
  } else {
    setHeaderHeight();
    setupVerticalScroll();
  }

  window.addEventListener("resize", setHeaderHeight);
  window.addEventListener("carousel:active", (e) => {
    if (container) {
      container.classList.toggle("no-snap", e.detail.active);
    }
  });

  if (container) {
    requestAnimationFrame(() => {
      if (document.getElementById("places-container")) {
        container.scrollTo({ top: 0, behavior: "instant" });
      }
    });
  } else {
    console.error("Error: #places-container not found for initial scroll.");
  }
</script>

<style>
  #places-container.no-snap {
    scroll-snap-type: none;
  }

  [data-vertical-scroll="true"] {
    touch-action: pan-y;
  }
</style>

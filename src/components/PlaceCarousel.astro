---
const { images = [] } = Astro.props;
const carouselId = `carousel-${Math.random().toString(36).substring(2, 10)}`;
---

{
  images.length > 0 && (
    <div class="relative w-full h-full" id={carouselId}>
      <div
        class="flex w-full h-full overflow-x-auto snap-x snap-mandatory scrollbar-hide"
        data-carousel
      >
        {images.map((image: string, i: number) => (
          <div
            class="flex-none w-full min-w-full h-full snap-center"
            data-slide={i}
          >
            <img
              src={image}
              alt={`Image ${i + 1}`}
              class="w-full h-full object-cover"
              loading={i < 2 ? "eager" : "lazy"}
            />
          </div>
        ))}
      </div>

      {images.length > 1 && (
          <button
            type="button"
            class="hidden md:block absolute top-1/2 left-4 -translate-y-1/2 bg-zinc-950 rounded-full p-2 z-10 opacity-50 hover:opacity-100 disabled:opacity-50 disabled:cursor-not-allowed"
            data-prev
          >
            <svg
              width="20"
              height="20"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                d="M15 19l-7-7 7-7"
              />
            </svg>
          </button>

          <button
            type="button"
            class="hidden md:block absolute top-1/2 right-4 -translate-y-1/2 bg-zinc-950 rounded-full p-2 z-10 opacity-50 hover:opacity-100 disabled:opacity-50 disabled:cursor-not-allowed"
            data-next
          >
            <svg
              width="20"
              height="20"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                d="M9 5l7 7-7 7"
              />
            </svg>
          </button>

          <div class="absolute bottom-4 left-1/2 -translate-x-1/2 flex gap-2 z-10">
            {images.map((_: any, i: any) => (
              <button
                type="button"
                class={`w-3 h-3 rounded-full transition-colors duration-200 ${
                  i === 0 ? "bg-white" : "bg-white/40"
                } `}
                data-dot={i}
              />
            ))}
          </div>
      )}
    </div>
  )
}

<style>
  .scrollbar-hide {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }

  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }
</style>

<script>
  function initCarousel(container: Element) {
    const carousel = container.querySelector("[data-carousel]") as HTMLElement;
    if (!carousel) return;
    const slides = [...container.querySelectorAll("[data-slide]")];
    const prevBtn = container.querySelector("[data-prev]") as HTMLButtonElement;
    const nextBtn = container.querySelector("[data-next]") as HTMLButtonElement;
    const dots = [...container.querySelectorAll("[data-dot]")];
    let current = 0;
    let isManualNavigation = false;
    const updateUI = (index: number) => {
      dots.forEach((dot, i) => {
        dot.classList.toggle("bg-white", i === index);
        dot.classList.toggle("bg-white/40", i !== index);
      });
      if (prevBtn) prevBtn.disabled = index === 0;
      if (nextBtn) nextBtn.disabled = index === slides.length - 1;
      current = index;
    };
    const scrollToSlide = (index: number) => {
      if (index < 0 || index >= slides.length) return;
      isManualNavigation = true;
      carousel.scrollTo({
        left: index * carousel.offsetWidth,
        behavior: "smooth",
      });
      updateUI(index);
      setTimeout(() => {
        isManualNavigation = false;
      }, 600); 
    };
    if (prevBtn) {
      prevBtn.addEventListener("click", () => scrollToSlide(current - 1));
    }
    if (nextBtn) {
      nextBtn.addEventListener("click", () => scrollToSlide(current + 1));
    }
    dots.forEach((dot, i) => {
      dot.addEventListener("click", () => scrollToSlide(i));
    });
    document.addEventListener("keydown", (e) => {
      const rect = carousel.getBoundingClientRect();
      const isVisible = rect.top < window.innerHeight && rect.bottom > 0;
      const hasFocus =
        document.activeElement === carousel ||
        carousel.contains(document.activeElement);
      if (!isVisible || !hasFocus) return;
      if (e.key === "ArrowLeft" && current > 0) {
        e.preventDefault();
        scrollToSlide(current - 1);
      } else if (e.key === "ArrowRight" && current < slides.length - 1) {
        e.preventDefault();
        scrollToSlide(current + 1);
      }
    });
    let scrollTimeout: number | null = null;
    carousel.addEventListener(
      "scroll",
      () => {
        if (isManualNavigation) return;
        if (scrollTimeout !== null) {
          clearTimeout(scrollTimeout);
        }
        scrollTimeout = window.setTimeout(() => {
          const slideWidth = carousel.offsetWidth;
          const slideIndex = Math.round(carousel.scrollLeft / slideWidth);

          if (
            slideIndex >= 0 &&
            slideIndex < slides.length &&
            slideIndex !== current
          ) {
            console.log(`Scroll detected, updating UI to index: ${slideIndex}`);
            updateUI(slideIndex);
          }
          scrollTimeout = null;
        }, 150);
      },
      { passive: true }
    );
    setTimeout(() => {
      const initialIndex = Math.round(
        carousel.scrollLeft / carousel.offsetWidth
      );
      if (initialIndex >= 0 && initialIndex < slides.length) {
        updateUI(initialIndex);
      } else {
        updateUI(0);
      }
      if (carousel.scrollLeft !== current * carousel.offsetWidth) {
        carousel.scrollTo({
          left: current * carousel.offsetWidth,
          behavior: "auto",
        });
      }
    }, 100);
    window.addEventListener(
      "resize",
      () => {
        const currentScrollTarget = current * carousel.offsetWidth;
        if (Math.abs(carousel.scrollLeft - currentScrollTarget) > 1) {
          carousel.scrollTo({
            left: currentScrollTarget,
            behavior: "auto", 
          });
        }
      },
      { passive: true }
    );
    carousel.setAttribute("tabindex", "0");
    carousel.style.outline = "none"; 
  }

  function initAllCarousels() {
    document
      .querySelectorAll('[id^="carousel-"]')
      .forEach((carouselContainer) => {
        if (!(carouselContainer as HTMLElement).dataset.carouselInitialized) {
          initCarousel(carouselContainer);
          (carouselContainer as HTMLElement).dataset.carouselInitialized =
            "true"; 
          console.log(`Carousel initialized: ${carouselContainer.id}`);
        } else {
          console.log(`Carousel already initialized: ${carouselContainer.id}`);
        }
      });
  }
  let initialLoadDone = false;
  function runInitializations() {
    if (!initialLoadDone) {
      console.log(
        "Running initializations (DOMContentLoaded or astro:page-load)"
      );
      initAllCarousels();
      initialLoadDone = true;
    }
  }
  document.addEventListener("astro:page-load", runInitializations);
  window.addEventListener("DOMContentLoaded", runInitializations);
  new MutationObserver((mutations) => {
    let needsReinit = false;
    for (const mutation of mutations) {
      if (mutation.type === "childList") {
        for (const node of mutation.addedNodes) {
          if (!(node instanceof Element)) continue;
          const carouselsInNode = Array.from(
            node.querySelectorAll('[id^="carousel-"]')
          ).concat(node.matches('[id^="carousel-"]') ? [node] : []);

          for (const carouselNode of carouselsInNode) {
            if (!(carouselNode as HTMLElement).dataset.carouselInitialized) {
              console.log(
                `New carousel detected by MutationObserver: ${carouselNode.id}`
              );
              needsReinit = true;
              break; 
            }
          }
        }
      }
      if (needsReinit) break;
    }
    if (needsReinit) {
      console.log("Re-running initAllCarousels due to dynamic content.");
      setTimeout(initAllCarousels, 50);
    }
  }).observe(document.body, { childList: true, subtree: true });
</script>

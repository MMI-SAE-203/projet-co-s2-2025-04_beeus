---
interface Props {
  images: string[];
}

const { images = [] } = Astro.props;
---

{images.length > 0 && (
  <div class="relative w-full h-[75dvh]">
    <div 
      class="carousel flex w-full h-full overflow-x-auto snap-x snap-mandatory scrollbar-hide"
    >
      {images.map((image, index) => (
        <div class="flex-none w-full min-w-full h-full snap-center">

          <img
            src={image}
            alt={`Image ${index + 1}`}
            class="w-full h-full object-cover"
            loading={index < 2 ? "eager" : "lazy"}
          />
        </div>
      ))}
    </div>

    {images.length > 1 && (
      <>
        <!-- Boutons de navigation visibles uniquement sur desktop -->
        <button
          type="button"
          class="prev hidden md:block absolute top-1/2 left-4 -translate-y-1/2 bg-white/70 rounded-full p-2 z-10"
          aria-label="Image précédente"
        >
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path stroke-linecap="round" stroke-linejoin="round" d="M15 19l-7-7 7-7" />
          </svg>
        </button>

        <button
          type="button"
          class="next hidden md:block absolute top-1/2 right-4 -translate-y-1/2 bg-white/70 rounded-full p-2 z-10"
          aria-label="Image suivante"
        >
          <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path stroke-linecap="round" stroke-linejoin="round" d="M9 5l7 7-7 7" />
          </svg>
        </button>
      </>
    )}
  </div>
)}

<style>
  /* Cache la barre de défilement tout en permettant le défilement */
  .scrollbar-hide {
    -ms-overflow-style: none;  /* IE et Edge */
    scrollbar-width: none;     /* Firefox */
  }
  .scrollbar-hide::-webkit-scrollbar {
    display: none;             /* Chrome, Safari et Opera */
  }
</style>

<script>
  // Script minimal uniquement pour les flèches sur desktop
  document.addEventListener("DOMContentLoaded", () => {
    const carousel = document.querySelector<HTMLDivElement>(".carousel");
    const prevBtn = document.querySelector<HTMLButtonElement>(".prev");
    const nextBtn = document.querySelector<HTMLButtonElement>(".next");
    
    if (!carousel) return;
    
    // Fonction simple pour faire défiler
    function scrollCarousel(direction: number) {
      const slideWidth = carousel?.offsetWidth ?? 0;
      const currentScroll = carousel?.scrollLeft ?? 0;
      
      carousel?.scrollTo({
        left: currentScroll + (direction * slideWidth),
        behavior: "smooth"
      });
    }
    
    // Événements des boutons (PC uniquement)
    if (prevBtn) {
      prevBtn.addEventListener("click", () => scrollCarousel(-1));
    }
    
    if (nextBtn) {
      nextBtn.addEventListener("click", () => scrollCarousel(1));
    }
  });
</script>
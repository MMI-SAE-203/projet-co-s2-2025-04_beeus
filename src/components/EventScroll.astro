---
import {
  pb,
  getAllEvents,
  getAllEventsForUser,
  getCategoryName,
} from "../lib/pocketbase.mjs";
import Button from "./Button.astro";
import userIcon from "../icons/user_2.svg";
import { formatDateFr } from "../lib/utils.js";

const events = await getAllEvents();
const userId = pb.authStore?.record?.id;
const userInteractions = userId ? await getAllEventsForUser(userId) : [];
const interactionsMap = new Map();
userInteractions.forEach(
  ({
    evenement,
    like,
    save,
    share,
  }: {
    evenement: string;
    like: boolean;
    save: boolean;
    share: boolean;
  }) => {
    if (evenement) {
      interactionsMap.set(evenement, {
        like: !!like,
        save: !!save,
        share: !!share,
      });
    }
  }
);
for (const event of events) {
  let date_formatee = await formatDateFr(event.date_heure);
  event.date_formatee = date_formatee;
}
---
<div
  class="min-h-[100vh]  overflow-x-hidden flex flex-col items-center justify-center text-center text-white px-4 md:px-6 lg:px-8
  bg-[url('../assets/hero.webp')] bg-cover bg-no-repeat bg-center lg:bg-[center_30%]
 bg-fixed bg-zinc-900/80"

>


  <h1 class="text-6xl md:text-8xl  xl:text-8xl font-bold mb-2 md:mb-4" style="text-shadow: 0 0 15px rgba(255,255,255,0.8);">
    BeeUs
  </h1>
  <h2 class="text-lg md:text-xllg:text-3xl mb-8 md:mb-12 max-w-2xl" style="text-shadow: 0 0 10px rgba(255,255,255,0.6);">
    Découvre, Rencontre, Partage
  </h2>
  <div class="flex flex-col items-center md:flex-row gap-4 md:gap-6 lg:gap-8 w-full max-w-md md:max-w-lg">
    <Button variant="full"><a href="/events">Événements</a></Button>
    <Button variant="border"> <a href="/places">Lieux recommandés</a></Button>
  </div>
</div>

<div id="app-header" class="bg-zinc-950/95 overflow-x-hidden backdrop-blur-sm py-2 md:py-3 w-full sticky top-16 z-40 border-b border-zinc-700/50 shadow-lg">
  <div class="flex items-center justify-between px-3 md:px-6  lg:px-12 xl:px-16 mx-auto max-w-7xl">
    <a
      href="/events-filter"
      class="px-3 py-1.5 md:px-4 md:py-2 rounded-full bg-(--color-blue) text-white text-xs md:text-sm lg:text-base font-medium transition-all duration-200 hover:opacity-90 hover:scale-105 active:scale-95 shadow-md"
    >
      <span class="hidden md:inline">Filtrer les événements</span>
      <span class="md:hidden">Filtrer</span>
    </a>
    <a
      href="/create-event"
      class="p-2 md:p-2.5 lg:p-3 rounded-full bg-(--color-blue) text-white transition-all duration-200 hover:opacity-90 hover:scale-110 active:scale-95 shadow-lg relative group"
      aria-label="Créer un nouvel événement"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="w-4 h-4 md:w-5 md:h-5 lg:w-6 lg:h-6"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
        stroke-width="2"
      >
        <path stroke-linecap="round" stroke-linejoin="round" d="M12 4v16m8-8H4"></path>
      </svg>
      <span class="absolute -top-10 left-1/2 transform -translate-x-1/2 bg-black text-white text-xs px-2 py-1 rounded opacity-0 group-hover:opacity-100 transition-opacity duration-200 whitespace-nowrap pointer-events-none">
        Créer un événement
      </span>
    </a>
  </div>
</div>

<div
  id="events-container"
  class="bg-zinc-950 overflow-x-hidden flex flex-col items-center gap-6 md:gap-8 md:gap-10 lg:gap-12 px-3  lg:px-12 xl:px-16 2xl:px-24  py-6 md:py-8 lg:py-12"
>
  {
    events.length > 0 ? (
      events.map((event: any) => {
        const organizer = event.expand?.createur || {};
        const avatarUrl = organizer.avatar
          ? pb.files.getURL(organizer, organizer.avatar)
          : userIcon.src;

        const parts = event.adresse.split(",").map((p: string) => p.trim());
        const numberAndStreet = parts.slice(0, 2).join(" ");
        const postalIndex = parts.findIndex((p: string) => /^\d{5}$/.test(p));
        const postalCode = postalIndex >= 0 ? parts[postalIndex] : "";
        const city = postalIndex > 0 ? parts[postalIndex - 1] : "";
        const minimalAddress = postalCode
          ? `${numberAndStreet}, ${postalCode} ${city}`
          : numberAndStreet;

        return (
          <article
            id={event.id}
            class="event-card group grid grid-cols-1 lg:grid-cols-[auto_1fr] gap-4 md:gap-6 lg:gap-8 bg-gradient-to-br from-zinc-900/90 to-zinc-800/60 backdrop-blur-md rounded-2xl md:rounded-3xl border border-zinc-700/50 shadow-xl hover:shadow-2xl transition-all duration-300 hover:border-zinc-600/70 hover:scale-[1.02] overflow-hidden max-w-5xl"
          >
            <!-- Mobile organizer section -->
            <div class="lg:hidden flex items-center gap-3 md:gap-4 pt-4 md:pt-6 px-4 md:px-6">
              <img
                src={!organizer.prive && avatarUrl ? avatarUrl : userIcon.src}
                alt="Avatar organisateur"
                class="w-10 h-10 md:w-12 md:h-12 rounded-full ring-2 ring-(--color-violet) object-cover shadow-md"
                loading="lazy"
              />
              <div class="min-w-0 flex-1">
                <p class="text-xs md:text-sm text-zinc-400 font-medium">Organisé par</p>
                <p class="text-white font-semibold capitalize text-sm md:text-base truncate">
                  {organizer.prenom + " " + organizer.nom || "Anonyme"}
                </p>
              </div>
            </div>

            <!-- Desktop organizer section -->
            <div class="hidden lg:flex items-center justify-center p-6 xl:p-8 min-w-0">
              <div class="flex flex-col items-center gap-3 text-center">
                <img
                  src={!organizer.prive && avatarUrl ? avatarUrl : userIcon.src}
                  alt="Avatar organisateur"
                  class="w-16 h-16 xl:w-20 xl:h-20 rounded-full ring-4 ring-(--color-violet) object-cover shadow-lg group-hover:scale-105 transition-transform duration-300"
                  loading="lazy"
                />
                <div class="min-w-0">
                  <p class="text-xs text-zinc-400 font-medium mb-1">Organisé par</p>
                  <p class="text-white font-semibold capitalize text-sm xl:text-base">
                    {organizer.prenom + " " + organizer.nom || "Anonyme"}
                  </p>
                </div>
              </div>
            </div>

            <!-- Main content -->
            <div class="flex flex-col p-4 md:p-6 lg:p-8 min-w-0">
              <!-- Header with title and categories -->
              <div class="flex flex-col  md:items-start md:justify-between gap-3 md:gap-4 mb-4 md:mb-6">
                <h2
                  class="text-xl md:text-2xl lg:text-3xl xl:text-4xl font-bold text-white leading-tight group-hover:text-(--color-violet) transition-colors duration-300"
                  style="font-family: var(--font-title);"
                >
                  {event.titre}
                </h2>
                <div class="flex flex-wrap gap-2 md:gap-2.5 lg:gap-3 md:flex-shrink-0">
                  {event.categories.slice(0, 3).map((cat: any) => {
                    const categoryName = getCategoryName(cat);
                    return (
                      <span class="bg-(--color-pink)/90 hover:bg-(--color-pink) text-white text-xs md:text-sm lg:text-base font-medium px-3 py-1.5 lg:px-4 lg:py-2 rounded-full whitespace-nowrap shadow-md transition-colors duration-200">
                        {categoryName}
                      </span>
                    );
                  })}
                </div>
              </div>

              <!-- Description -->
              <p class="text-zinc-300 text-sm md:text-base lg:text-lg leading-relaxed mb-6 md:mb-8 line-clamp-3 md:line-clamp-4 lg:line-clamp-5">
                {event.description}
              </p>

              <!-- Event details grid responsive -->
<div class="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-4 md:gap-6 mb-6 md:mb-8">

  <!-- Adresse -->
  <div class="flex items-center gap-4 bg-white/5 hover:bg-white/10 rounded-xl p-4 group transition-colors duration-200 md:col-span-2 xl:col-span-1">
    <span class="bg-(--color-blue)/20 p-2.5 rounded-full text-(--color-blue)">
      <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd"/>
      </svg>
    </span>
    <span class="truncate flex-1 text-zinc-300 text-sm md:text-base font-medium">
      {minimalAddress}
    </span>
    <button
      class="p-2 bg-(--color-violet)/80 hover:bg-(--color-violet) rounded-lg transition duration-200 opacity-100"
      aria-label="Copier l'adresse"
      data-address={event.adresse}
    >
      <svg class="w-4 h-4 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
        <path stroke-linecap="round" stroke-linejoin="round" d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2" />
        <rect x="9" y="3" width="6" height="4" rx="1" ry="1" />
      </svg>
    </button>
  </div>

  <!-- Participants -->
  <div class="flex items-center gap-4 bg-white/5 hover:bg-white/10 rounded-xl p-4 transition-colors duration-200">
    <span class="bg-(--color-yellow)/20 p-2.5 rounded-full text-(--color-yellow)">
      <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
        <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3zM6 8a2 2 0 11-4 0 2 2 0 014 0zM16 18v-3a5.972 5.972 0 00-.75-2.906A3.005 3.005 0 0119 15v3h-3zM4.75 12.094A5.973 5.973 0 004 15v3H1v-3a3 3 0 013.75-2.906z"/>
      </svg>
    </span>
    <div class="flex items-baseline gap-1">
      <span class="text-white font-bold text-lg md:text-xl">
        {event.participants?.length ?? 0}
      </span>
      <span class="text-zinc-400 text-sm md:text-base">
        / {event.participants_max}
      </span>
    </div>
  </div>

  <!-- Date -->
  <div class="flex items-center gap-4 bg-white/5 hover:bg-white/10 rounded-xl p-4 transition-colors duration-200">
    <span class="bg-green-500/20 p-2.5 rounded-full text-green-400">
      <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
        <path fill-rule="evenodd" d="M6 2a1 1 0 00-1 1v1H4a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V6a2 2 0 00-2-2h-1V3a1 1 0 10-2 0v1H7V3a1 1 0 00-1-1zm0 5a1 1 0 000 2h8a1 1 0 100-2H6z" clip-rule="evenodd"/>
      </svg>
    </span>
    <span class="text-zinc-300 text-sm md:text-base font-medium">
      {event.date_formatee || "Bientôt"}
    </span>
  </div>

</div>


              <!-- Action button -->
              <div class="flex justify-end">
                <Button variant="custom" custom="py-2 md:py-3 px-4 md:px-6 lg:px-8 text-sm md:text-base lg:text-lg font-semibold hover:scale-105 active:scale-95 transition-transform duration-200 shadow-lg">
                  <a href={`/events/${event.slug}`}>En savoir plus</a>
                </Button>
              </div>
            </div>
          </article>
        );
      })
    ) : (
      <div class="flex flex-col items-center justify-center py-16 md:py-20 lg:py-24 text-center px-4">
        <div class="bg-zinc-800/50 rounded-full p-6 md:p-8 mb-6 md:mb-8">
          <svg
            class="w-16 h-16 md:w-20 md:h-20 lg:w-24 lg:h-24 text-(--color-violet)"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="1.5"
              d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
            />
          </svg>
        </div>
        <h3 class="text-xl md:text-2xl lg:text-3xl font-bold text-white mb-3 md:mb-4">
          Aucun événement trouvé
        </h3>
        <p class="text-zinc-400 text-base md:text-lg lg:text-xl max-w-md">
          Revenez plus tard ou ajustez vos filtres pour découvrir de nouveaux événements.
        </p>
      </div>
    )
  }
  <div id="load-trigger" class="h-8 md:h-12"></div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    document.querySelectorAll("[data-address]").forEach((button) => {
      button.addEventListener("click", () => {
        const address = button.getAttribute("data-address");
        if (!address) return;

        navigator.clipboard.writeText(address).then(() => {
          const original = button.innerHTML;
          button.innerHTML = `
            <svg class="w-4 h-4 md:w-5 md:h-5 text-white" fill="currentColor" viewBox="0 0 20 20">
              <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/>
            </svg>
          `;
          setTimeout(() => {
            button.innerHTML = original;
          }, 1500);
        });
      });
    });

    const articles = [...document.querySelectorAll("article")];
    let visible = 3;

    const showArticles = () => {
      articles.forEach((el, i) => {
        el.style.display = i < visible ? "grid" : "none";
      });
    };

    showArticles();

    const observer = new IntersectionObserver((entries) => {
      if (entries[0].isIntersecting && visible < articles.length) {
        visible += 3;
        showArticles();
      }
    });

    const trigger = document.getElementById("load-trigger");
    if (trigger) observer.observe(trigger);
  });
</script>

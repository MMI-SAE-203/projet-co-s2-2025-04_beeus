---
import {
  pb,
  getAllEvents,
  getAllEventsForUser,
  getCategoryName,
} from "../lib/pocketbase.mjs";
import EventsInteraction from "./SetEventsInteraction.jsx";

const events = await getAllEvents();
const userId = pb.authStore?.record?.id;
const userInteractions = userId ? await getAllEventsForUser(userId) : [];
const interactionsMap = new Map();

userInteractions.forEach(
  ({
    evenement,
    like,
    save,
    share,
  }: {
    evenement: string;
    like: boolean;
    save: boolean;
    share: boolean;
  }) => {
    if (evenement)
      interactionsMap.set(evenement, {
        like: !!like,
        save: !!save,
        share: !!share,
      });
  }
);
---

<div id="app-header" class="bg-black py-3">
  <div class="flex items-center justify-between max-w-screen-lg mx-auto">
    <a
      href="/events-filter"
      class="px-3 py-1.5 rounded-full bg-blue-600 text-white text-xs sm:text-sm font-medium transition-colors duration-150 ease-in-out hover:bg-blue-500 focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 focus-visible:ring-offset-black"
    >
      Filtrer
    </a>
    <a
      href="/create-event"
      class="p-2 rounded-full bg-blue-600 text-white transition-colors duration-150 ease-in-out hover:bg-blue-500 focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 focus-visible:ring-offset-black"
      aria-label="Créer un nouvel événement"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="w-4 h-4 sm:w-5 sm:h-5"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
        stroke-width="2"
      >
        <path stroke-linecap="round" stroke-linejoin="round" d="M12 4v16m8-8H4"
        ></path>
      </svg>
    </a>
  </div>
</div>

<div
  id="events-container"
  class="h-[calc(92dvh-var(--header-height))] overflow-y-auto bg-gray-950"
  data-vertical-scroll="true"
>
  {
    events.map((event: any, index: any) => {
      const ui = interactionsMap.get(event.id) || {
        like: false,
        save: false,
        share: false,
      };
      const organizer = event.expand?.createur || {};
      event.organizerAvatar = event.expand?.createur?.avatar
        ? pb.getFileUrl(event.expand.createur, event.expand.createur.avatar)
        : null;
      return (
        <div
          id={`event-${index}`}
          class="relative flex flex-col p-4 border-b border-gray-800 bg-gray-900 px-4 md:px-8 lg:px-32"
        >
          <div class="flex items-center gap-3 sm:gap-4">
            <img
              src={
                !organizer.prive && event.organizerAvatar
                  ? event.organizerAvatar
                  : "/src/icons/user_2.svg"
              }
              alt="Avatar de l'organisateur"
              class="w-10 h-10 sm:w-11 sm:h-11 rounded-full flex-shrink-0"
              loading="lazy"
            />
            <div class="text-white text-left text-xs sm:text-sm min-w-0">
              <p class="font-semibold leading-tight truncate">
                {!organizer.prive && organizer.prenom && organizer.nom
                  ? organizer.prenom + " " + organizer.nom
                  : "Organisateur anonyme"}
              </p>
              <p class="text-gray-400 text-xs leading-tight">{event.date}</p>
              <p class="text-gray-400 text-xs leading-tight truncate">
                {event.adresse}
              </p>
              <p class="text-gray-400 text-xs leading-tight truncate">
                {event.participants?.length ?? 0} / {event.participants_max}{" "}
                participants
              </p>
              <div class="flex flex-wrap gap-1 mt-1">
                {event.categories.slice(0, 3).map((category: string) => (
                  <span class="px-2 py-1 bg-blue-700 text-white text-xs rounded-full whitespace-nowrap">
                    {getCategoryName(category)}
                  </span>
                ))}
              </div>
            </div>
          </div>

          <div class="my-3 text-white text-sm sm:text-base">
            {event.description}
          </div>

          <div class="flex gap-2 mt-2">
            <EventsInteraction
              events={event}
              setEvents={() => {}}
              client:load
            />
            <a
              href={`/events/${event.slug}`}
              class="px-4 py-2 rounded-full bg-blue-600 text-white text-xs sm:text-sm font-medium transition duration-150 ease-in-out hover:bg-blue-500 focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 focus-visible:ring-offset-gray-900"
            >
              Découvrir cet événement
            </a>
          </div>
        </div>
      );
    })
  }
</div>
